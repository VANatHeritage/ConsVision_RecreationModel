# ---------------------------------------------------------------------------
# RecMod_summaries.py
# Version: ArcPro / Python 3+
# Creation Date: 2021-07-12
# Last Edit: 2021-07-14
# Creator: Kirsten R. Hazler
#
# Summary: 
# Functions to generate summary tables and charts for the Nature-based Recreation Access Model
# ---------------------------------------------------------------------------

#### Set up some inputs and outputs (user change as needed for specific paths) ####
inFolder = r"N:\ProProjects\RecAccessModel\TIF_Albers"
inMask = r"N:\ProProjects\RecAccessModel\Summaries.gdb\Mask"
inPop = r"N:\SpatialData\DCR\Population\p20\input_recmodel.gdb\distribPop_kdens_2019"

outFolder_png = r"N:\ProProjects\RecAccessModel\PNG"
outFolder_xl = r"N:\ProProjects\RecAccessModel\EXCEL"
outGDB = r"N:\ProProjects\RecAccessModel\Summaries.gdb"
#### User should modify input/output paths above as needed, then plug into functions to run ####
#### A def __main__ statement could be added at the end to run all at once in sequence, or copy variables and functions into  the python window and run interactively. I did the latter b/c it took awhile to get the charts right! -krh####

# Function to generate summary data tables
def makeSumTabs(inFolder, outGDB, inMask, inPop):
	''' Summarizes raster data by tabulating area and population by recreation need scores
	
	Parameters:
	- inFolder: folder containing the rasters in TIF format
	- outGDB: geodatabase for storing output tables (must already exist)
	- inMask: uniform raster with value = 1, covering area of score datasets 
	- inPop: raster representing population per pixel (aka "distributed population")
	'''
	
	### Settings and variables
	arcpy.env.overwriteOutput=True
	
	# Dictionary relating TIF file names to descriptive names
	pathDict = dict()
	pathDict["a1"] = ["aquaProxScore", "Proximity Score"]
	pathDict["a2"] = ["aquaAccOptScore", "Access Options Score"]
	pathDict["a3"] = ["aquaActOptScore", "Activities Options Score"]
	pathDict["a4"] = ["aquaPressureScore", "Pressure Score"]
	pathDict["a5"] = ["aquaCompScore", "Composite Score"]
	pathDict["t1"] = ["terrProxScore", "Proximity Score"]
	pathDict["t2"] = ["terrLocOptScore", "Local Options Score"]
	pathDict["t3"] = ["terrRegOptScore", "Regional Options Score"]
	pathDict["t4"] = ["terrPressureScore", "Pressure Score"]
	pathDict["t5"] = ["terrCompScore", "Composite Score"]
	
	# Output tables
	aquaAreaSums = outGDB + os.sep + "aquaAreaSums"
	aquaPopSums = outGDB + os.sep + "aquaPopSums"
	terrAreaSums = outGDB + os.sep + "terrAreaSums"
	terrPopSums = outGDB + os.sep + "terrPopSums"

	# Run zonal statistics
	print('Running zonal stats...')
	for key in pathDict.keys():
		name = pathDict[key][0]
		print('Working on %s...'%name)
		label = pathDict[key][1]
		infile = inFolder + os.sep + name + ".tif"
		areaTab = outGDB + os.sep + name + "_areaTab"
		popTab = outGDB + os.sep + name + "_popTab"
		newList = [infile, label, areaTab, popTab]
		pathDict[key] = newList
		arcpy.sa.ZonalStatisticsAsTable(infile, "Value", inMask, areaTab, "DATA", "SUM")
		arcpy.management.CalculateField(areaTab, "LABEL", "'%s'"%label, "PYTHON3", '', "TEXT")
		arcpy.sa.ZonalStatisticsAsTable(infile, "Value", inPop, popTab, "DATA", "SUM")
		arcpy.management.CalculateField(popTab, "LABEL", "'%s'"%label, "PYTHON3", '', "TEXT")
	
	# Merge tables
	aquaIDs = ["a1", "a2", "a3", "a4", "a5"]
	terrIDs = ["t1", "t2", "t3", "t4", "t5"]
	
	aquaArea = []
	aquaPop = []
	terrArea = []
	terrPop = []
	
	for id in aquaIDs:
		areaTab = pathDict[id][2]
		aquaArea.append(areaTab)
		popTab = pathDict[id][3]
		aquaPop.append(popTab)
	for id in terrIDs:
		areaTab = pathDict[id][2]
		terrArea.append(areaTab)
		popTab = pathDict[id][3]
		terrPop.append(popTab)
	
	print('Merging tables...')
	arcpy.management.Merge(aquaArea, aquaAreaSums)
	arcpy.management.Merge(aquaPop, aquaPopSums)
	arcpy.management.Merge(terrArea, terrAreaSums)
	arcpy.management.Merge(terrPop, terrPopSums)
	
	# Pivot tables
	print('Pivoting tables...')
	for t in [aquaAreaSums,aquaPopSums,terrAreaSums,terrPopSums]:
		t_pivot = t + "_pivot"
		arcpy.management.PivotTable(t, "LABEL", "Value", "SUM", t_pivot)
	
	print('Mission accomplished.')
	return
	
# Function to generate stacked bar charts	from summary table generated by previous function
def stackbars(inTab, colorSet, titleType, outFolder_png, outFolder_xl, outName):
	'''Generates a percentage stacked bar chart for the input table and color scheme specified. Also outputs an Excel file with the data for the chart.
	
	Parameters:
	- inTab: The table from which chart will be created (one of the tables generated by previous function)
	- colorSet: The color scheme to use ("land" or "water")
	- titleType: The type of title to place on the x-axis ("area" or "pop")
	- outFolder_png: The folder to store the output image (folder must already exist)
	- outFolder_xl: The folder to store the output excel table (folder must already exist)
	- outName: The name to use for output image and excel table
	'''
	
	# Imports and settings
	arcpy.env.overwriteOutput=True
	import os
	import pandas as pd
	import numpy as np
	import matplotlib.pyplot as plt
	
	# Specify color schemes to match the maps
	if colorSet == "land":
		colors = ['#4C7300', '#A8CF66', '#EDF091', '#DDAF5B', '#9C5B00']
	else:
		colors = ['#003C30', '#5AB2A8', '#FFFFBE', '#CFA255', '#543005']
	
	# Specify title to place on x-axis
	if titleType == "area":
		xTitle = 'Percent of Geographic Area'
	else:
		xTitle = 'Percent of Population'
	
	# Get field list and convert table to numpy array
	# In subsequent steps, assuming field names carry over from the previous function
	flds = arcpy.ListFields(inTab)
	flist = [f.name for f in flds]
	npArray = arcpy.da.TableToNumPyArray (inTab, flist)

	# Convert numpy array to pandas dataframe, drop OID, convert nulls to zeros, and assign new field names  
	df = pd.DataFrame(npArray)
	df = df.drop(columns = 'OBJECTID')
	df = df.fillna(0)
	df = df.set_axis(['Score', 'VL', 'L', 'M', 'H', 'VH'], axis = 1)
	
	# Calculate percentages
	df['Total'] = df['VL'] + df['L'] + df['M'] + df['H'] + df['VH']
	procList = [['VL', 'Very Low'],
					['L', 'Low'],
					['M', 'Moderate'],
					['H', 'High'],
					['VH', 'Very High']]
	for i in procList:
		df[i[1]]= df[i[0]]/df['Total']*100
		
	# Reorder dataframe so things plot in the desired order
	df = df.set_index('Score')
	if colorSet == "land":
		orderList = ['Composite Score', 'Proximity Score', 'Local Options Score', 'Regional Options Score', 'Pressure Score']
	else:
		orderList = ['Composite Score', 'Proximity Score', 'Access Options Score', 'Activities Options Score', 'Pressure Score']
	df = df.reindex(orderList)
	df = df.reset_index()
		
	# Set up basic chart
	p = df.plot.barh(x = 'Score', y = ['Very Low', 'Low', 'Moderate', 'High', 'Very High'], color = colors, stacked = True, figsize = (8,5))
		
	# Make layout fit a little better
	plt.subplots_adjust(left = 0.25)
	plt.subplots_adjust(bottom = 0.09)
	plt.subplots_adjust(right = 0.95)
	plt.subplots_adjust(top = 0.85)
	
	# Show the x-axis label but not the y-axis label
	plt.xlabel(xTitle)
	plt.ylabel('')
	
	# Set x-axis properties
	plt.xlim([0,105])
	p.xaxis.grid(True, which = 'major', linestyle=':')
	
	# Configure position and add legend across the top
	box = p.get_position()
	p.set_position([box.x0, box.y0 + box.height * 0.1, box.width, box.height * 0.9])
	if colorSet == "land":
		lTitle = "Land-based Recreation Need"
	else:
		lTitle = "Water-based Recreation Need"
	p.legend(title=lTitle, loc='upper center', bbox_to_anchor=(0.5, 1.15), fancybox=True, shadow=True, ncol=5)	
	
	# Save the plot and table
	outFig = outFolder_png + os.sep + outName + ".png"
	plt.savefig(outFig)
	outXL = outFolder_xl + os.sep + outName + ".xls"
	df.to_excel(outXL)
	
	return p
	
# Function to generate a batch of stacked bar charts from a set of summary tables
# Assumes tables are named as output by the makeSumTabs function
def batch_stackbars(inGDB, outFolder_png, outFolder_xl):
	'''Generates a bar chart and Excel sheet for each of the tables created by the makeSumTabs function
	
	Parameters:
	- inGDB: Geodatabase containing summary tables (same as outGDB in the makeSumTabs function)
	- outFolder_png: The folder to store the output image file (folder must already exist)
	- outFolder_xl: The folder to store the output Excel file (folder must already exist)
	'''
	import os
	
	# Processing dictionary
	procDict = dict()
	procDict["aArea"] = ["aquaAreaSums", "water", "area"]
	procDict["aPop"] = ["aquaPopSums", "water", "pop"]
	procDict["tArea"] = ["terrAreaSums", "land", "area"]
	procDict["tPop"] = ["terrPopSums", "land", "pop"]
	
	# Make charts in loop
	for key in procDict.keys():
		name = procDict[key][0] + "_pivot"
		colorSet = procDict[key][1]
		titleType = procDict[key][2]
		inTab = inGDB + os.sep + name
		stackbars(inTab, colorSet, titleType, outFolder_png, outFolder_xl, name)